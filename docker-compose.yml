services:

  service_discovery:
    build: ./service-discovery
    hostname: host-service-discovery
    container_name: container_service_discovery
    ports:
      - "8761:8761"
    environment:
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
    networks:
      - rede_ecormmerce

  api_gateway:
    build: ./api-gateway
    hostname: host_api_gateway
    container_name: container_api_gateway
    restart: always
    ports:
      - "8080:8080"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://host-service-discovery:8761/eureka/
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED: "true"
      SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_LOWER_CASE_SERVICE_ID: "true"
    networks:
      - rede_ecormmerce
    depends_on:
      - service_discovery

  order_service:
    build: ./order-service
    hostname: host_order_service
    container_name: container_order_service
    depends_on:
      - service_discovery
      - mongo_db_order_service
    ports:
      - "8081:8081"
    restart: always
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://host-service-discovery:8761/eureka/
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      SPRING_DATA_MONGODB_HOST: host_mongo_db_order_service
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: order_db
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      SPRING_DATA_MONGODB_USERNAME: root
      SPRING_DATA_MONGODB_PASSWORD: 123
    networks:
      - rede_ecormmerce

  product_service:
    build: ./product-service
    hostname: host_product_service
    container_name: container_product_service
    depends_on:
      - service_discovery
      - mongo_db_product_service
    ports:
      - "8082:8082"
    restart: always
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://host-service-discovery:8761/eureka/
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      SPRING_DATA_MONGODB_URI: mongodb://root:123@host_mongo_db_product_service:27017/product_db?authSource=admin
    networks:
      - rede_ecormmerce

  notification_service:
    build: ./notification-service
    hostname: host_notification_service
    container_name: container_notification_service
    depends_on:
      - service_discovery
      - mongo_db_notification_service
    ports:
      - "8083:8083"
    restart: always
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://host-service-discovery:8761/eureka/
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      SPRING_DATA_MONGODB_HOST: host_mongo_db_notification_service
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: notification_db
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      SPRING_DATA_MONGODB_USERNAME: root
      SPRING_DATA_MONGODB_PASSWORD: 123
    networks:
      - rede_ecormmerce

  mongo_db_order_service:
    image: mongo:8.0.4
    hostname: host_mongo_db_order_service
    container_name: container_mongo_db_order_service
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_DATABASE: order_db
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123
    volumes:
      - .e-cormmerce/mongo_data/order:/data/db
      - ./order-service/src/main/resources/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - rede_ecormmerce

  mongo_db_product_service:
    image: mongo:8.0.4
    hostname: host_mongo_db_product_service
    container_name: container_mongo_db_product_service
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: product_db
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123
    volumes:
      - .e-cormmerce/mongo_data/product:/data/db
      - ./product-service/src/main/resources/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - rede_ecormmerce

  mongo_db_notification_service:
    image: mongo:8.0.4
    hostname: host_mongo_db_notification_service
    container_name: container_mongo_db_notification_service
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_DATABASE: notification_db
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123
    volumes:
      - .e-cormmerce/mongo_data/notification:/data/db
      - ./notification-service/src/main/resources/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - rede_ecormmerce

  kafka:
    image: bitnami/kafka:3.9.0
    restart: on-failure
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_INTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT_INTERNAL
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_NUM_PARTITIONS=3
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - rede_ecormmerce
    extra_hosts:
      - "host.docker.internal:host-gateway"

  zookeeper:
    image: bitnami/zookeeper:3.9.3
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - rede_ecormmerce

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8000:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=E-COMMERCE
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    volumes:
      - .e-cormmerce/kafka/kafka-ui-data:/app/data
    networks:
      - rede_ecormmerce

networks:
  rede_ecormmerce:
    driver: bridge